// AUTOGENERATED FILE. DO NOT EDIT.

package tplfuncs

import (
	"fmt"
	htmlTemplate "html/template"
	textTemplate "text/template"
)

// MathHelpers returns a text template FuncMap with math related functions
func MathHelpers() textTemplate.FuncMap {
	return textTemplate.FuncMap{
		// functions working on int values
		"addInt":          addIntFunc,
		"subtractInt":     subtractIntFunc,
		"subtractFromInt": subtractFromIntFunc,
		"multiplyInt":     multiplyIntFunc,

		// functions working on float values
		"addFloat":          addFloatFunc,
		"subtractFloat":     subtractFloatFunc,
		"subtractFromFloat": subtractFromFloatFunc,
		"multiplyFloat":     multiplyFloatFunc,

		// deprecated
		"floatAdd":   floatAddFunc,
		"floatSub":   floatSubFunc,
		"floatMul":   floatMulFunc,
		"floatDiv":   floatDivFunc,
		"floatDivBy": floatDivByFunc,
	}
}

// MathHelpersHTML returns an HTML template FuncMap with math related functions
func MathHelpersHTML() htmlTemplate.FuncMap {
	return htmlTemplate.FuncMap(MathHelpers())
}

func floatDivFunc(values ...float64) (float64, error) {
	if len(values) < 2 {
		return 0, fmt.Errorf("not enough values given for floating point division: %v", values)
	}
	result := values[0]
	for _, v := range values[1:] {
		if v == 0 {
			return 0, fmt.Errorf("floating point division by null with values %v", values)
		}
		result = result / v
	}
	return result, nil
}

func floatDivByFunc(values ...float64) (float64, error) {
	count := len(values)
	reversedValues := make([]float64, count)

	for i, v := range values {
		reversedValues[count-(i+1)] = v
	}

	return floatDivFunc(reversedValues...)
}

func floatAddFunc(values ...float64) float64 {
	if len(values) == 0 {
		return 0.0
	}

	sum := values[0]
	for _, v := range values[1:] {
		sum += v
	}

	return sum
}

func floatSubFunc(values ...float64) float64 {
	if len(values) == 0 {
		return 0.0
	}

	sum := values[0]
	for _, v := range values[1:] {
		sum -= v
	}

	return sum
}

func floatMulFunc(values ...float64) float64 {
	if len(values) == 0 {
		return 0.0
	}

	sum := values[0]
	for _, v := range values[1:] {
		sum *= v
	}

	return sum
}

// addIntFunc adds a number of int values and returns the total sum.
func addIntFunc(inputs ...int) int {
	var sum int
	for _, input := range inputs {
		sum += input
	}
	return sum
}

// subtractIntFunc subtracts a number of int values from the first one and returns the remaining value.
func subtractIntFunc(start int, inputs ...int) int {
	sum := start
	for _, input := range inputs {
		sum -= input
	}
	return sum
}

// subtractFromIntFunc subtracts a number of int values from the last one and returns the remaining value.
func subtractFromIntFunc(inputs ...int) int {
	if len(inputs) == 0 {
		return 0
	}
	sum := inputs[len(inputs)-1]
	for i := 0; i < len(inputs)-1; i++ {
		sum -= inputs[i]
	}
	return sum
}

// multiplyIntFunc multiplies a number of int values and returns the total value.
func multiplyIntFunc(inputs ...int) int {
	var sum int
	for _, input := range inputs {
		sum *= input
	}
	return sum
}

// addFloatFunc adds a number of float64 values and returns the total sum.
func addFloatFunc(inputs ...float64) float64 {
	var sum float64
	for _, input := range inputs {
		sum += input
	}
	return sum
}

// subtractFloatFunc subtracts a number of float64 values from the first one and returns the remaining value.
func subtractFloatFunc(start float64, inputs ...float64) float64 {
	sum := start
	for _, input := range inputs {
		sum -= input
	}
	return sum
}

// subtractFromFloatFunc subtracts a number of float64 values from the last one and returns the remaining value.
func subtractFromFloatFunc(inputs ...float64) float64 {
	if len(inputs) == 0 {
		return 0
	}
	sum := inputs[len(inputs)-1]
	for i := 0; i < len(inputs)-1; i++ {
		sum -= inputs[i]
	}
	return sum
}

// multiplyFloatFunc multiplies a number of float64 values and returns the total value.
func multiplyFloatFunc(inputs ...float64) float64 {
	var sum float64
	for _, input := range inputs {
		sum *= input
	}
	return sum
}
